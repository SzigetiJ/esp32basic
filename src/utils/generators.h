/*
 * Copyright 2025 SZIGETI JÃ¡nos
 *
 * This file is part of Bilis ESP32 Basic, which is released under GNU General Public License.version 3.
 * See LICENSE or <https://www.gnu.org/licenses/> for full license details.
 */
#ifndef GENERATORS_H
#define GENERATORS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

  // ============= Types ===============

  /**
   * The byte generator takes a byte array and iterated over it
   * from the first item (inclusive) to the last item (exclusive).
   */
  typedef struct {
    const uint8_t *pu8Begin;
    const uint8_t *pu8End;
    const uint8_t *pu8Cur;
  } SByteGenState;

  /**
   * The bit iterator takes a single byte and iterates over its bits
   * either LSB to MSB (bUp==true) or MSB to LSB (bUp==false).
   * The output of the generator is u8OutHi (if current bit is set) or
   * u8OutLo (the current bit is not set).
   */
  typedef struct {
    uint8_t u8Value;
    uint8_t u8BitIdx;
    uint8_t u8OutHi;
    uint8_t u8OutLo;
    bool bUp;
  } SBitGenState;

  // Auxilliary function types
  typedef uint8_t(*FToByteNext)(void *pvState);
  typedef uint16_t(*FToWordNext)(void *pvState);
  typedef bool (*FToXEnd)(const void *pvState);
  typedef void (*FToXReset)(void *pvState);
  typedef void (*FByteToXResetV)(void *pvState, uint8_t u8Value);
  typedef void (*FWordToXResetV)(void *pvState, uint16_t u16Value);

  typedef struct {
    FToByteNext fNext;
    FToXEnd fEnd;

    union {
      FToXReset fReset;
      FByteToXResetV fResetV;
    };
  } SToByteFunctions;

  typedef struct {
    FToWordNext fNext;
    FToXEnd fEnd;

    union {
      FToXReset fReset;
      FWordToXResetV fResetV;
    };
  } SToWordFunctions;

  /**
   * Byte generator composition.
   * Generator (B) can be resetted with a byte value.
   * Values generated by (A) are given to generator (B) in its resetv function
   * whenever (B).reaches its end.
   * The output of this composition is the output of (B).
   */
  typedef struct {
    void *pvAState;
    void *pvBState;
    const SToByteFunctions *psFuncA;
    const SToByteFunctions *psFuncB;
  } STrByteGenState;

  /**
   * State descriptor of a PWM generator, which is a kind of composition.
   * It relies on generator (A). For each value generated by (A), PWM generates
   * two values: a high level (pulse) and a low level (rest of the period).
   * The output type of the PWM generator is a pair of uint8_t combined
   * into a single uint16_t value: the upper part of this value
   * denotes the level of the signal, whereas the lower part of the value denotes
   * the length of the signal.
   */
  typedef struct {
    void *pvAState;
    const SToByteFunctions *psFuncA;
    uint8_t u8CurValue;
    uint8_t u8PeriodLen;
    uint8_t u8HiUpper;
    uint8_t u8LoUpper;
    uint8_t u8PhaseIdx;
  } SPwmGenState;

  /**
   * Auxilliary state descriptor of PWM generator - not storing information about
   * the underlying byte generator.
   */
  typedef struct {
    uint8_t u8CurValue;
    uint8_t u8PeriodLen;
    uint8_t u8HiUpper;
    uint8_t u8LoUpper;
    uint8_t u8PhaseIdx;
  } SPwmXGenState;

  /**
   * State descriptor of a bitsequence-to-pwm generator.
   * This kind of composite generator is used by WS2812B, for example.
   */
  typedef struct {
    SByteGenState sByteGenState;
    SBitGenState sBitGenState;
    SPwmXGenState sPwmXGenState;
  } SBitPwmGenState;

  // ============= Global constants ===============
  extern const SToByteFunctions gsByteGenFunc;
  extern const SToByteFunctions gsBitGenFunc;
  extern const SToByteFunctions gsBitSeqGenFunc;
  extern const SToWordFunctions gsPwmGenFunc;

  // ============= Interface function declaration ===============
  SByteGenState bytegen_init(const uint8_t *pu8Seq, size_t szSeqLen);
  uint8_t bytegen_next(SByteGenState *psState);
  bool bytegen_end(const SByteGenState *psState);
  void bytegen_reset(SByteGenState *psState);

  SBitGenState bitgen_init(uint8_t u8Value, bool bUp, uint8_t u8OutHi, uint8_t u8OutLo);
  uint8_t bitgen_next(SBitGenState *psState);
  bool bitgen_end(const SBitGenState *psState);
  void bitgen_resetv(SBitGenState *psState, uint8_t u8Value);

  uint8_t trbytegen_next(STrByteGenState *psState);
  bool trbytegen_end(const STrByteGenState *psState);
  void trbytegen_reset(STrByteGenState *psState);

  STrByteGenState bitseqgen_init(SByteGenState *psAState, SBitGenState *psBState);

  SPwmGenState pwmgen_init(void *pvState, const SToByteFunctions *psFunc, uint8_t u8PeriodLen, uint8_t u8HiUpper, uint8_t u8LoUpper);
  uint16_t pwmgen_next(SPwmGenState *psState);
  bool pwmgen_end(const SPwmGenState *psState);
  void pwmgen_reset(SPwmGenState *psState);

  uint16_t bitpwmgen_next(SBitPwmGenState *psState);
  bool bitpwmgen_end(const SBitPwmGenState *psState);
  void bitpwmgen_reset(SBitPwmGenState *psState);

#ifdef __cplusplus
}
#endif

#endif /* GENERATORS_H */

